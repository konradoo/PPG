#version 120

attribute vec4 vVertex;
attribute vec3 vNormal;

varying vec4 vVaryingColor;

uniform mat4 projectionMatrix;
uniform mat3 normalMatrix;
uniform mat4 modelViewMatrix;
uniform vec3 ambientLight;
uniform vec3 lightPos;
uniform vec3 lightCol;

void main() {
  vec4 positionInEyeSpace4 = modelViewMatrix * vVertex;
  vec3 positionInEyeSpace3 = positionInEyeSpace4.xyz / positionInEyeSpace4.w;
  vec3 normalInEyeSpace    = normalMatrix * vNormal;
  vec3 toLight             = lightPos - positionInEyeSpace3;

  vec3 N = normalize(vNormal);
  vec3 L = normalize(lightPos);
  vec3 H = normalize(toLight);

  vec3 ambient  = lightCol.rgb * ambientLight;
  vec3 diffuse  = lightCol.rgb * (1.0 - ambientLight) * max(dot(L, N), 0.0);
  vec3 specular = vec3(1.0, 1.0, 1.0) * pow(max(dot(H, N), 0.0), 16.0);

  vVaryingColor = vec4(ambient + diffuse + specular, 1.0);

  gl_Position = projectionMatrix * modelViewMatrix * vVertex;
}